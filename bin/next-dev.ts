#!/usr/bin/env ts-node
import yargs from "yargs";
import { hideBin } from "yargs/helpers";
import "colors";
import fs from "fs";

import isNextJsRootDir from "./isNextRootDir";
import generateDevBox from "./generateDevBox";
import generateApi from "./generateApi";
import generatePage from "./generatePage";
import clearDevBox from "./clearDevBox";
import genTree from "./generateTree";
import genModel from "./generateModel";
import genExport from "./generateExport";
import devTest from "./devTest";

const app_config = `
// this file is generated by next-dev, optionally you can edit it
const port = process.env.PORT || 3005;
const localhost = \`http://localhost:\${port}\`;
const serverHost = 'https://wibu-server.wibudev.com';
const isLocal = process.env.NODE_ENV === 'development';
const app_config = {
    title: 'Wibu Server',
    description: 'Server Untuk Wibu',
    host:  isLocal ? localhost : serverHost,
    isLocal
}

export default app_config;
`;


if (!fs.existsSync("./src/util")) {
    fs.mkdirSync("./src/util");
    console.log("create dir util");
}

if (!fs.existsSync("./src/util/app_config.ts")) {
    fs.writeFileSync("./src/util/app_config.ts", app_config, {
        encoding: "utf8",
    });
    console.log("create app_config.ts");
}

yargs(hideBin(process.argv))
    .command(
        "gen-box",
        "generate DevBox",
        (yargs) => yargs.option("log", { alias: "l", type: "boolean", default: false, description: "print log to console" }),
        async (argv) => {
            isNextJsRootDir();
            try {
                await generateDevBox(argv);
            } catch (error) {
                console.error(`Error generating DevBox: ${error}`.red);
            }
        }
    )
    .command(
        "clear-box",
        "clear DevBox",
        (yargs) => yargs.option("log", { alias: "l", type: "boolean", default: false, description: "print log to console" }),
        async (argv) => {
            isNextJsRootDir();
            try {
                await clearDevBox(argv);
            } catch (error) {
                console.error(`Error clearing DevBox: ${error}`.red);
            }
        }
    )
    .command(
        "gen-api",
        "generate API",
        (yargs) => yargs.option("log", { alias: "l", type: "boolean", default: false, description: "print log to console" }),
        async (argv) => {
            isNextJsRootDir();
            try {
                await generateApi(argv);
            } catch (error) {
                console.error(`Error generating API: ${error}`.red);
            }
        }
    )
    .command(
        "gen-page",
        "generate Page",
        (yargs) => yargs.option("log", { alias: "l", type: "boolean", default: false, description: "print log to console" }),
        async (argv) => {
            isNextJsRootDir();
            try {
                await generatePage(argv);
            } catch (error) {
                console.error(`Error generating Page: ${error}`.red);
            }
        }
    )
    .command(
        "gen-tree",
        "generate Tree",
        (yargs) => yargs.option("log", { alias: "l", type: "boolean", default: false, description: "print log to console" })
            .option("name", { alias: "n", type: "string", description: "file name without extension" }),
        async (argv) => {
            await genTree(argv);
        }
    )
    .command(
        "gen-model",
        "generate Model",
        (yargs) => yargs
            .option("log", { alias: "l", type: "boolean", default: false, description: "log" })
            .option("url", { alias: "u", type: "string", description: "imput url" })
            .option("name", { alias: "n", type: "string", default: "Model", description: "interface name" })
            .option("out", { alias: "o", type: "string", default: "src/model", description: "output directory" })
            .option("file", { alias: "f", type: "string", description: "input file" })
            .option("dir", { alias: "d", type: "string", description: "input directory" }),
        async (argv) => {
            await genModel(argv);
        }
    )
    .command(
        "gen-export",
        "generate Export",
        (yargs) => yargs
            .option("log", { alias: "l", type: "boolean", default: false, description: "log" })
            .option("dir", { alias: "d", type: "string", description: "output directory", demandOption: true })
            .option("listFilter", { alias: "f", type: "array", description: "list filter", coerce: (arg) => arg.map(String) }),
        async (argv) => {
            await genExport(argv);
        }
    )
    .command(
        "dev-test",
        "dev-test",
        (yargs) => yargs
            .option("log", { alias: "l", type: "boolean", default: false, description: "log" })
            .option("url", { alias: "u", type: "string", description: "imput url", demandOption: true }),
        async (argv) => {
            await devTest(argv);
        }
    )
    .recommendCommands()
    .demandCommand(1)
    .help()
    .parse();
